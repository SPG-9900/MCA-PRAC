Create binary tree and perform recursive traversals

#include<stdio.h>
#include<stdlib.h>
struct bst
{
    int data;
    struct bst *left,*right;
}*temp,*newnode,*root=NULL;
struct bst* createnode()
{
    temp=(struct bst *)malloc(sizeof(struct bst));
    temp->left=NULL;
    temp->right=NULL;
    return temp;
}
void insert(struct bst* nw,struct bst* r)
{
    if(nw->data < r->data)
    {
        if(r->left==NULL)
        {
            r->left=nw;
        }
        else
        {
            insert(nw,r->left);
        }
    }
    if(nw->data > r->data)
    {
        if(r->right == NULL)
        {
            r->right=nw;
        }
        else
        {
            insert(nw,r->right);
        }
    }
}
void inorder(struct bst* r)
{
    if(r!=NULL)
    {
        inorder(r->left);
        printf("%d\t",r->data);
        inorder(r->right);
    }
}
void postorder(struct bst* r)
{
    if(r!=NULL)
    {
        postorder(r->left);
        postorder(r->right);
        printf("%d\t",r->data);
    }
}
void preorder(struct bst* r)
{
    if(r!=NULL)
    {
        printf("%d\t",r->data);
        preorder(r->left);
        preorder(r->right);
    }
}
void main()
{
    int ch,data,i,no;
    while(1)
    {
        printf("\n----------------------------------------------------\n");
        printf("1.Create");
        printf("\n2.Inorder");
        printf("\n3.Preorder");
        printf("\n4.Postorder");
        printf("\n5.Exit");
        printf("\nEnter your choice:");
        scanf("%d",&ch);    
        printf("\n----------------------------------------------------\n");
        switch(ch)
        {
            case 1:
                printf("How many data do you want insert:");
                scanf("%d",&no);
                for(i=0;i<no;i++)
                {
                    newnode=createnode();               
                    printf("Enter the data");
                    scanf("%d",&newnode->data);
                    if(root==NULL)
                    {
                        root=newnode;
                    }
                    else
                    {
                        insert(newnode,root);
                    }
                }
                break;
            case 2:
                printf("Inorder:");
                inorder(root);
                break;
            case 3:
                printf("Preorder:");
                preorder(root);
                break;
            case 4:
                printf("Postorder:");
                postorder(root);
                break;
            case 5:
                exit(0);
            default:
                printf("\nInvalid choice......");
        }

        
    }
}
