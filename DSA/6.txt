Implement stack as an ADT. Use this ADT to perform expression conversion and evaluation. (Infix â€“ Postfix)


#include<stdio.h>
#include<conio.h>
#include<ctype.h>
int stack[20],top=-1;
void push(char ch)
{
    stack[++top]=ch;
}
char pop()
{
    if(top==-1)
    {
        return -1;
    }
    else
    {
        return stack[top--];
    }
}
int precedence(char ch)
{
    if(ch == '(')
    {
        return 0;
    }
    if(ch== '+' || ch=='-')
    {
        return 1;
    }
    if(ch=='*' || ch=='/')
    {
        return 2;
    }
    return 0;
}
void main()
{
    char *e;
    char exp[20],x;
    clrscr();
    printf("Enter the expression:");
    scanf("%s",exp);
    e=exp;
    while(*e != '\0')
    {
        if(isalnum(*e))
        {
            printf("%c",*e);
        }
        else if(*e == '(')
        {
            push(*e);
        }
        else if(*e == ')')
        {
            while((x=pop())!='(')
            {
                printf("%c",x);
            }
        }
        else
        {
            while(precedence(stack[top])>=precedence(*e))
            {
                printf("%c",pop());
            }
            push(*e);
        }
        e++;
    }
    while(top != -1)
    {
        printf("%c",pop());
    }
    getch();
}

